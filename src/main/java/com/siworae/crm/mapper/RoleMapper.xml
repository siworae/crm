<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.siworae.crm.dao.RoleMapper" >
  <resultMap id="BaseResultMap" type="com.siworae.crm.po.Role" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="role_name" property="roleName" jdbcType="VARCHAR" />
    <result column="role_remark" property="roleRemark" jdbcType="VARCHAR" />
    <result column="create_date" property="createDate" jdbcType="TIMESTAMP" />
    <result column="update_date" property="updateDate" jdbcType="TIMESTAMP" />
    <result column="is_valid" property="isValid" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, role_name, role_remark, create_date, update_date, is_valid
  </sql>
  <select id="queryById" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from t_role
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="delete" parameterType="java.lang.Integer" >
    delete from t_role
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <!--<insert id="insert" parameterType="com.siworae.crm.po.Role" >
    insert into t_role (id, role_name, role_remark, 
      create_date, update_date, is_valid
      )
    values (#{id,jdbcType=INTEGER}, #{roleName,jdbcType=VARCHAR}, #{roleRemark,jdbcType=VARCHAR}, 
      #{createDate,jdbcType=TIMESTAMP}, #{updateDate,jdbcType=TIMESTAMP}, #{isValid,jdbcType=INTEGER}
      )
  </insert>-->
  <insert id="save" parameterType="com.siworae.crm.po.Role" >
    insert into t_role
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="roleName != null" >
        role_name,
      </if>
      <if test="roleRemark != null" >
        role_remark,
      </if>
      <if test="createDate != null" >
        create_date,
      </if>
      <if test="updateDate != null" >
        update_date,
      </if>
      <if test="isValid != null" >
        is_valid,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="roleName != null" >
        #{roleName,jdbcType=VARCHAR},
      </if>
      <if test="roleRemark != null" >
        #{roleRemark,jdbcType=VARCHAR},
      </if>
      <if test="createDate != null" >
        #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="updateDate != null" >
        #{updateDate,jdbcType=TIMESTAMP},
      </if>
      <if test="isValid != null" >
        #{isValid,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="update" parameterType="com.siworae.crm.po.Role" >
    update t_role
    <set >
      <if test="roleName != null" >
        role_name = #{roleName,jdbcType=VARCHAR},
      </if>
      <if test="roleRemark != null" >
        role_remark = #{roleRemark,jdbcType=VARCHAR},
      </if>
      <if test="createDate != null" >
        create_date = #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="updateDate != null" >
        update_date = #{updateDate,jdbcType=TIMESTAMP},
      </if>
      <if test="isValid != null" >
        is_valid = #{isValid,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>

  <select id="queryAllRoles" resultType="map">
    SELECT t_role.id,t_role.role_name as roleName FROM t_role
      WHERE
      t_role.is_valid = 1
  </select>

  <select id="queryByParams" parameterType="RoleQuery" resultMap="BaseResultMap">
    select * from t_role
    <where>
      is_valid = 1
      <if test="roleName != null and roleName != ''">
        and role_Name like concat("%",#{roleName},"%")
      </if>
      <if test="createDate != null and createDate != ''">
        and create_date &lt;= #{createDate}
      </if>
    </where>

  </select>

  <update id="deleteBatch">
    update t_role set is_valid = 0 where id in (
    <foreach collection="array" item="item" separator=",">
      #{item}
    </foreach>
    )
  </update>

  <select id="queryByName" parameterType="string" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from t_role
    where role_name = #{roleName}
  </select>

  <!-- 通过roleId查询当前角色所拥有的所有权限 -->
  <select id="queryPermissionByRoleId" parameterType="int" resultType="ModuleDto">
    SELECT
      m.id,
      m.module_name AS name,
      m.parent_id AS pId,
      p.module_id as checked
      FROM
      t_module AS m
      LEFT JOIN(
        SELECT
        p.role_id,
        p.module_id
        FROM
        t_permission AS p
        WHERE
        p.role_id = #{roleId}
      ) as p on p.module_id=m.id
      WHERE
      m.is_valid = 1

  </select>

</mapper>